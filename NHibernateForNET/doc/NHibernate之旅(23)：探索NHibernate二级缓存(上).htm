<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>NHibernate之旅(23)：探索NHibernate二级缓存(上) - 李永京 - 博客园</title>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/blog/css/common.css?id=20130622"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="http://common.cnblogs.com/Skins/Minyx2_Lite/style.css?id=20130622"/>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/blog/css/common2.css"/>
<link type="text/css" rel="stylesheet" href="http://common.cnblogs.com/css/shStyle.css"/>
<link type="text/css" rel="stylesheet" href="http://www.cnblogs.com/lyj/customcss.aspx?id=23571"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/lyj/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/lyj/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/lyj/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">
var currentBlogApp = 'lyj';
</script>
<script src="http://common.cnblogs.com/blog/script/common.js?id=20130622" type="text/javascript"></script> 
<script src="http://common.cnblogs.com/script/json2.js" type="text/javascript"></script>
<script src="http://common.cnblogs.com/Skins/Minyx2_Lite/script/skin.js" language="javascript" type="text/javascript"></script>
<script type="text/javascript" src="http://common.cnblogs.com/script/syntaxHighlighter.js"></script>
</head>
<body>
<a name="top"></a>
<!--PageBeginHtml Block Begin-->
<SCRIPT language=javascript type=text/javascript src="http://files.cnblogs.com/lyj/lyj.js"></SCRIPT>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-15058429-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
<!--PageBeginHtml Block End-->


<div id="container">
    <a class="minyx" href="http://www.spiga.com.mx/">Spiga</a>
    <ul id="topMnu">
        <!-- 统计数据 -->
        <li>
        
            
Posts - 145, 
Articles - 0, 
Comments - 5523
<!---->            
        
        </li>
        <!-- 这边可以增加一些链接 -->
        <!-- 博客园 -->
        <li><a href="http://www.cnblogs.com">Cnblogs</a></li>
        <!-- 管理 -->
        <li id="topMnu-dashboard"><a id="lnkDashboard" href="http://www.cnblogs.com/lyj/admin/EditPosts.aspx">Dashboard</a></li>
        <li><a id="lnkLogin" href="http://passport.cnblogs.com/login.aspx?ReturnUrl=http://www.cnblogs.com/lyj/archive/2008/11/27/1341885.html">Login</a></li>
    </ul>
    
    <script language="javascript" type="text/javascript">
        var m = window.__blog.topMenuRendered;
        if (m) { m(__$("topMnu")); }
    </script>

    <div id="header">
        <ul id="menu">
                <!-- 首页，当前section加上current类 -->
                <li id="menu-home" class="current"><a id="lnkHome" href="http://www.cnblogs.com/lyj/">Home</a></li>
                <!-- 联系 -->
                <li id="menu-contact"><a id="lnkContact" href="http://space.cnblogs.com/msg/send/%e6%9d%8e%e6%b0%b8%e4%ba%ac">Contact</a></li>
                <!-- 相册 -->
                <li id="menu-gallary"><a id="lnkGallery" href="http://www.cnblogs.com/lyj/gallery.html">Gallery</a></li>
                <!-- Rss订阅 -->
                <li id="rss"><a id="lnkRss" href="http://www.cnblogs.com/lyj/rss">RSS</a></li>
        </ul>
	<div id="newmsg"></div>
        <h1>
            <!-- 主标题 -->
            <a id="lnkBlogTitle" href="http://www.cnblogs.com/lyj/">YJingLee's Blog</a>
            <!-- 子标题 -->
            <small>把握点点滴滴！</small>
        </h1>
    </div>
    
    <script language="javascript" type="text/javascript">
        var m = window.__blog.headerRendered;
        if (m) { m(__$("header")); }
    </script>
        
    <div id="wrapper"> 
        <div id="content">
             <script language="javascript" type="text/javascript">
                        var m = window.__blog.preRenderPosts;
                        if (m) { m(); } 
            </script>
            
	
<div class="post" id="post"><a name="top"></a>
    <h2>
        <a id="ctl01_lnkTitle" href="http://www.cnblogs.com/lyj/archive/2008/11/27/1341885.html">NHibernate之旅(23)：探索NHibernate二级缓存(上)</a></h2>
    <small>
        2008-11-27 00:07
        by
        李永京,
        <span id="post_view_count">...</span>
        阅读,
        <span id="post-comment-count"><span id="post_comment_count">...</span></span>
        评论,
        <a href="#" onclick="PutInWz();return false;">收藏</a>,
        <a id="ctl01_lnkEdit" href="http://www.cnblogs.com/lyj/admin/EditPosts.aspx?postid=1341885">编辑</a></small>
    <div class="entry">
        <div id="cnblogs_post_body"><p><em><strong>本节内容</strong></em></p>
<ul>
	<li>引入</li>
	<li>介绍NHibernate二级缓存</li>
	<li>NHibernate二级缓存提供程序</li>
	<li>实现NHibernate二级缓存</li>
	<li>结语</li>
</ul>
<h2>引入</h2>
<p>上一篇我介绍了NHibernate内置的一级缓存即ISession缓存。这篇我们来了解下NHibernate二级缓存即ISessionFactory级别缓存。二级缓存是可扩展的，在<a href="http://sourceforge.net/projects/nhcontrib/" target="_blank">NHibernate 
Contrib</a>上提供了第三方NHibernate二级缓存提供程序。</p>
<h2>介绍NHibernate二级缓存</h2>
<p>NHibernate二级缓存由ISessionFactory创建，可以被所有的ISession共享。</p>
<p>在NHibernate中，当我们启用NHibernate二级缓存。使用ISession进行数据操作时，NHibernate首先从内置缓存(一级缓存)中查找是否存在需要的数据，如果内置缓存不存在需要的数据，则查询二级缓存，如果二级缓存中存在所需数据，则直接使用缓存中数据，否则从数据库中查询数据并放入缓存中。</p>
<p>NHibernate本身提供了一个基于Hashtable的HashtableCache缓存，但是功能非常有限而且性能比较差，不适合在大型应用程序使用，我们可以使用第三方缓存提供程序作为NHibernate二级缓存实现。</p>
<p>但是，使用缓存的缺点就是如果缓存策略设置不当，NHibernate不知道其它应用程序对数据库的修改及时更新缓存。因此，建议只对系统经常使用、数据量不大且不会被其它应用程序修改的只读数据(或很少被修改的数据)使用缓存。</p>
<h2>NHibernate二级缓存提供程序</h2>
<p>NHibernate提供了NHibernate.Cache.ICacheProvider接口用来支持第三方缓存提供程序实现。开发缓存提供程序时，需要实现该接口作为NHibernate和缓存实现直接的适配器。NHibernate提供了常见的缓存提供程序的内置适配器，这些适配器都实现了NHibernate.Cache.ICacheProvider接口。</p>
<p>除了NHibernate本身提供的一个基于Hashtable的HashtableCache缓存，在<a href="http://sourceforge.net/projects/nhcontrib/" target="_blank">NHibernate 
Contrib</a>上提供了六种第三方NHibernate二级缓存提供程序，完全开源的。我们直接下载其程序集引用到我们的项目中就可以使用了。</p>
<ul>
	<li>NHibernate.Caches.MemCache</li>
	<li>NHibernate.Caches.Prevalence</li>
	<li>NHibernate.Caches.SharedCache</li>
	<li>NHibernate.Caches.SysCache</li>
	<li>NHibernate.Caches.SysCache2</li>
	<li>NHibernate.Caches.Velocity</li>
</ul>
<h2>实现NHibernate二级缓存</h2>
<p>NHibernate二级缓存是一个可插拔的组件。在默认情况下，NHibernate不启动二级缓存。如果要使用二级缓存则需要在NHibernate配置文件中显式的启用二级缓存。NHibernate二级缓存可以分别为每一个具体的类和集合配置应用级或分布式缓存。</p>
<h3>缓存并发策略</h3>
<p>提示一下，在NHibernate官方文档中有介绍，详情请参考NHibernate官方文档。当两个独立的事务同时访问数据库时，可能产生丢失更新、不可重复读等并发问题。同样，当两个并发事务同时访问缓存时，也有可能产生各种并发问题。因此，在缓存级别也需要设置相应的并发访问策略。</p>
<p>NHibernate内置四种并发访问策略：</p>
<ul>
	<li>read-only：只读缓存。适用于只读数据。可用于群集中。</li>
	<li>read-write：读写缓存。</li>
	<li>nonstrict-read-write：非严格读写缓存。不保证缓存与数据库的一致性。</li>
	<li>transactional：事务缓存。提供可重复读的事务隔离级别。</li>
</ul>
<p>我们动手实现二级缓存吧~~~</p>
<h3>Step1：配置第三方缓存提供程序</h3>
<p>我们在NHibernate配置文件中通过cache.provider_class属性显式指定缓存实现，属性值为缓存适配器的具体类名。如果你使用上面的第三方缓存提供程序，还需要配置缓存提供程序本身。这里我设置NHibernate本身提供了一个基于Hashtable的HashtableCache缓存。</p>
<pre class="code"><span style="color:blue">&lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">cache.provider_class</span>"<span style="color:blue">&gt;</span>NHibernate.Cache.HashtableCacheProvider<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;</span></pre>
<h3>Step2：显式启用二级缓存 </h3>
<p>在NHibernate配置文件中使用cache.use_second_level_cache属性显式启用二级缓存，参数为Bool值，这里启用设置为true。</p>
<pre class="code"><span style="color:blue">&lt;</span><span style="color:#a31515">property </span><span style="color:red">name </span><span style="color:blue">=</span>"<span style="color:blue">cache.use_second_level_cache</span>"<span style="color:blue">&gt;</span>true<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;</span></pre>
<h3>Step3：配置第三方缓存提供程序本身</h3>
<p>如果你使用第三方缓存提供程序，那么需要对第三方缓存提供程序本身进行配置，需要详细配置第三方缓存提供程序缓存属性：保存时间、过期时间、可以缓存对象数量。这里我就使用NHibernate本身提供的HashtableCache缓存，所以这一步就省略了。</p>
<h3>Step4：为每一个持久化类和集合指定相应的缓存策略</h3>
<p>方法一：在映射文件中通过&lt;cache&gt;元素配置类和集合的缓存策略，在Class元素或者集合元素中添加&lt;cache&gt;元素进行配置。注意：&lt;cache&gt;元素必须在&lt;id&gt;元素之前。</p>
<pre class="code"><span style="color:blue">&lt;</span><span style="color:#a31515">cache </span><span style="color:red">usage</span><span style="color:blue">=</span>"<span style="color:blue">read-only|read-write|nonstrict-read-write</span>" <span style="color:red">region</span><span style="color:blue">=</span>"<span style="color:blue">默认类或集合名称</span>"<span style="color:blue">/&gt;</span></pre>
<p>方法二：在NHibernate配置文件hibernate.cfg.xml中通过&lt;class-cache&gt;元素和&lt;collection-cache&gt;元素分别配置类和集合的缓存策略。</p>
<p>我还是建议大家使用NHibernate配置文件定义缓存策略，这样可以避免在各个映射文件配置缓存定义而增大维护难度。</p>
<p>指定类：</p>
<pre class="code"><span style="color:blue">&lt;</span><span style="color:#a31515">class-cache </span><span style="color:red">class</span><span style="color:blue">=</span>"<span style="color:blue">类名称</span>" <span style="color:red">region</span><span style="color:blue">=</span>"<span style="color:blue">默认类名称</span>" <span style="color:red">include</span><span style="color:blue">=</span>"<span style="color:blue">all|non-lazy</span>"
             <span style="color:red">usage</span><span style="color:blue">=</span>"<span style="color:blue">read-only|read-write|nonstrict-read-write|transactional</span>" <span style="color:blue">/&gt;</span></pre>
<p>指定集合：</p>
<pre class="code"><span style="color:blue">&lt;</span><span style="color:#a31515">collection-cache </span><span style="color:red">collection </span><span style="color:blue">=</span>"<span style="color:blue">集合名称</span>" <span style="color:red">region</span><span style="color:blue">=</span>"<span style="color:blue">默认集合名称</span>"
                  <span style="color:red">usage</span><span style="color:blue">=</span>"<span style="color:blue">read-only|read-write|nonstrict-read-write|transactional</span>"<span style="color:blue">/&gt;</span></pre>
<p>具体意义是：</p>
<ul>
	<li>region：可选，默认值为类或集合的名称，用来指定二级缓存的区域名，对应于缓存实现的一个命名缓存区域。</li>
	<li>include：可选，默认值为all，当取non-lazy时设置延迟加载的持久化实例的属性不被缓存。</li>
	<li>usage：声明缓存同步策略，就是上面说明的四种缓存策略。</li>
</ul>
<p>配置文件和映射文件定义不一样，不知道是不是BUG。</p>
<h3>Step5：开始测试</h3>
<p>在测试之前，我们先看看上面的步骤我们完成了哪些内容。我贴出具体代码：</p>
<p>代码片段1：NHibernate配置文件：</p>
<pre class="code"><span style="color:blue">&lt;?</span><span style="color:#a31515">xml </span><span style="color:red">version</span><span style="color:blue">=</span>"<span style="color:blue">1.0</span>" <span style="color:red">encoding</span><span style="color:blue">=</span>"<span style="color:blue">utf-8</span>"<span style="color:blue">?&gt;
&lt;</span><span style="color:#a31515">hibernate-configuration  </span><span style="color:red">xmlns</span><span style="color:blue">=</span>"<span style="color:blue">urn:nhibernate-configuration-2.2</span>" <span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">session-factory </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">NHibernateSample.DAL.Test</span>"<span style="color:blue">&gt;
    &lt;!--
       </span><span style="color:green">配置二级缓存实例文件
       作者：李永京（YJingLee's Blog）
       出处：http://lyj.cnblogs.com
    </span><span style="color:blue">--&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">connection.driver_class</span>"<span style="color:blue">&gt;</span>NHibernate.Driver.SqlClientDriver<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">connection.connection_string</span>"<span style="color:blue">&gt;
      </span>Data Source=.\SQLEXPRESS;Initial Catalog=NHibernateSample;
      Integrated Security=True;Pooling=False<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">adonet.batch_size</span>"<span style="color:blue">&gt;</span>10<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">show_sql</span>"<span style="color:blue">&gt;</span>true<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">dialect</span>"<span style="color:blue">&gt;</span>NHibernate.Dialect.MsSql2005Dialect<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">use_outer_join</span>"<span style="color:blue">&gt;</span>true<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">query.substitutions</span>"<span style="color:blue">&gt;</span>true 1, false 0, yes 'Y', no 'N'<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;!--</span><span style="color:green">1.配置二级缓存提供程序</span><span style="color:blue">--&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">cache.provider_class</span>"<span style="color:blue">&gt;</span>NHibernate.Cache.HashtableCacheProvider<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;!--</span><span style="color:green">2.显式启用二级缓存</span><span style="color:blue">--&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name </span><span style="color:blue">=</span>"<span style="color:blue">cache.use_second_level_cache</span>"<span style="color:blue">&gt;</span>true<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;!--</span><span style="color:green">4.启动查询缓存(注:下一篇内容：http://lyj.cnblogs.com)</span><span style="color:blue">--&gt;
    &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">cache.use_query_cache</span>"<span style="color:blue">&gt;</span>true<span style="color:blue">&lt;/</span><span style="color:#a31515">property</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">mapping </span><span style="color:red">assembly</span><span style="color:blue">=</span>"<span style="color:blue">DomainModel</span>"<span style="color:blue">/&gt;
    &lt;!--</span><span style="color:green">3.配置映射的二级缓存</span><span style="color:blue">--&gt;
    &lt;</span><span style="color:#a31515">class-cache </span><span style="color:red">class</span><span style="color:blue">=</span>"<span style="color:blue">DomainModel.Entities.Customer,DomainModel</span>" <span style="color:red">usage</span><span style="color:blue">=</span>"<span style="color:blue">read-write</span>"<span style="color:blue">/&gt;
    &lt;/</span><span style="color:#a31515">session-factory</span><span style="color:blue">&gt;
&lt;/</span><span style="color:#a31515">hibernate-configuration</span><span style="color:blue">&gt;</span></pre>
<p>代码片段2：Customer.hbm.xml映射文件：</p>
<pre class="code"><span style="color:blue">&lt;?</span><span style="color:#a31515">xml </span><span style="color:red">version</span><span style="color:blue">=</span>"<span style="color:blue">1.0</span>" <span style="color:red">encoding</span><span style="color:blue">=</span>"<span style="color:blue">utf-8</span>" <span style="color:blue">?&gt;
&lt;</span><span style="color:#a31515">hibernate-mapping </span><span style="color:red">xmlns</span><span style="color:blue">=</span>"<span style="color:blue">urn:nhibernate-mapping-2.2</span>" 
                   <span style="color:red">assembly</span><span style="color:blue">=</span>"<span style="color:blue">DomainModel</span>" <span style="color:red">namespace</span><span style="color:blue">=</span>"<span style="color:blue">DomainModel</span>"<span style="color:blue">&gt;<span style="color:blue">
    &lt;!--</span>
       <span style="color:green">配置二级缓存映射文件
       作者：李永京（YJingLee's Blog）
       出处：http://lyj.cnblogs.com
    </span>--&gt;
  &lt;</span><span style="color:#a31515">class </span><span style="color:red">name </span><span style="color:blue">=</span>"<span style="color:blue">DomainModel.Entities.Customer,DomainModel</span>" 
         <span style="color:red">table</span><span style="color:blue">=</span>"<span style="color:blue">Customer</span>"<span style="color:blue">&gt;
    &lt;</span><strong><span style="color:#a31515">cache </span><span style="color:red">usage</span><span style="color:blue">=</span>"<span style="color:blue">read-write</span>"</strong><span style="color:blue">/&gt;
    &lt;</span><span style="color:#a31515">id </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">CustomerId</span>" <span style="color:red">type</span><span style="color:blue">=</span>"<span style="color:blue">Int32</span>" <span style="color:red">unsaved-value</span><span style="color:blue">=</span>"<span style="color:blue">0</span>"<span style="color:blue">&gt;
      &lt;</span><span style="color:#a31515">generator </span><span style="color:red">class </span><span style="color:blue">=</span>"<span style="color:blue">native</span>"<span style="color:blue">&gt;&lt;/</span><span style="color:#a31515">generator</span><span style="color:blue">&gt;
    &lt;/</span><span style="color:#a31515">id</span><span style="color:blue">&gt;
    &lt;</span><span style="color:#a31515">version </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">Version</span>" <span style="color:red">type</span><span style="color:blue">=</span>"<span style="color:blue">integer</span>" <span style="color:red">unsaved-value</span><span style="color:blue">=</span>"<span style="color:blue">0</span>"<span style="color:blue">/&gt;    
    &lt;</span><span style="color:#a31515">component </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">Name</span>" <span style="color:red">class</span><span style="color:blue">=</span>"<span style="color:blue">DomainModel.Entities.Name,DomainModel</span>"<span style="color:blue">&gt;
      &lt;</span><span style="color:#a31515">property </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">Firstname</span>"<span style="color:blue">/&gt;
      &lt;</span><span style="color:#a31515">property </span><span style="color:red">name </span><span style="color:blue">=</span>"<span style="color:blue">Lastname</span>"<span style="color:blue">/&gt;
    &lt;/</span><span style="color:#a31515">component</span><span style="color:blue">&gt; 
    &lt;</span><span style="color:#a31515">set </span><span style="color:red">name</span><span style="color:blue">=</span>"<span style="color:blue">Orders</span>" <span style="color:red">table</span><span style="color:blue">=</span>"<span style="color:blue">`Order`</span>" <span style="color:red">generic</span><span style="color:blue">=</span>"<span style="color:blue">true</span>" <span style="color:red">inverse</span><span style="color:blue">=</span>"<span style="color:blue">true</span>"<span style="color:blue">&gt;
      &lt;</span><strong><span style="color:#a31515">cache </span><span style="color:red">usage</span><span style="color:blue">=</span>"<span style="color:blue">read-only</span>"</strong><span style="color:blue">/&gt;
      &lt;</span><span style="color:#a31515">key </span><span style="color:red">column</span><span style="color:blue">=</span>"<span style="color:blue">Customer</span>" <span style="color:red">foreign-key</span><span style="color:blue">=</span>"<span style="color:blue">FK_CustomerOrders</span>"<span style="color:blue">/&gt;
      &lt;</span><span style="color:#a31515">one-to-many </span><span style="color:red">class</span><span style="color:blue">=</span>"<span style="color:blue">DomainModel.Entities.Order,DomainModel</span>"<span style="color:blue">/&gt;
    &lt;/</span><span style="color:#a31515">set</span><span style="color:blue">&gt;
  &lt;/</span><span style="color:#a31515">class</span><span style="color:blue">&gt;
&lt;/</span><span style="color:#a31515">hibernate-mapping</span><span style="color:blue">&gt;</span></pre>
<h3>Step6：测试代码</h3>
<p>在不同Session中获取实体：</p>
<pre class="code">[<span style="color:#2b91af">Test</span>]
<span style="color:blue">public void </span>SessionFactoryCacheTest()
{
     <span style="color:blue">using </span>(_session)
    {
        <span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"--Session 1--读取持久化实例--"</span>);
        <span style="color:#2b91af">Customer </span>customer1 = _session.Get&lt;<span style="color:#2b91af">Customer</span>&gt;(1);
        <span style="color:#2b91af">Assert</span>.IsNotNull(customer1);
    }
    ResetSession();
    <span style="color:blue">using </span>(_session)
    {
        <span style="color:#2b91af">Console</span>.WriteLine(<span style="color:#a31515">"--Session 2--读取持久化实例--"</span>);
        <span style="color:#2b91af">Customer </span>customer2 = _session.Get&lt;<span style="color:#2b91af">Customer</span>&gt;(1);
        <span style="color:#2b91af">Assert</span>.IsNotNull(customer2);
    }
}</pre>
<p>分析一下：在第一次查询数据时，由于一级、二级缓存中都不存在需要的数据，这时NHibernate从数据库中查询数据。第二次读取同一数据，NHibernate首先从内置缓存(一级缓存)中查找是否存在所需要数据，由于不是在同一个ISession中，所以内置ISession缓存中不存在所需数据，NHibernate则查询二级缓存，这时由于第一次查询了这条数据，所以在二级缓存中存在所需数据，则直接使用缓存中数据。看看输出结果吧：</p>
<p><a target="_blank" href="http://images.cnblogs.com/cnblogs_com/lyj/NHibernate/23-1.jpg">
<img alt="启用NHibernate二级缓存测试" height="163" src="http://images.cnblogs.com/cnblogs_com/lyj/NHibernate/23-1.jpg" width="467" /></a></p>
<h2>结语</h2>
<p>好了，这篇就到这里吧！我们初步认识了NHibernate二级缓存，并用一个查询例子说明了一切，但是关于二级缓存还有很多内容，比如你修改、删除数据时，二级缓存是什么策略呢？我们如果使用查询缓存呢？如何管理NHibernate二级缓存呢？这就在下一篇揭晓吧。</p>
<p><strong>本系列链接：<a target="_blank" href="http://www.cnblogs.com/lyj/archive/2008/10/30/1323099.html">NHibernate之旅系列文章导航</a></strong></p>
<fieldset>
<legend><b>NHibernate Q&amp;A</b></legend>
<ul>
	<li>欢迎加入<a target="_blank" href="http://space.cnblogs.com/group/NHibernate">NHibernate中文社区</a>，一起讨论NHibernate知识！</li>
	<li>请到<a target="_blank" href="http://space.cnblogs.com/group/NHibernate">NHibernate中文社区</a>下载本系列相关源码。</li>
</ul>
</fieldset>
<p>下次继续分享NHibernate！</p></div><div id="MySignature"></div>
        
<script type="text/javascript">
var isLogined = false;
var cb_blogId = 23571;
var cb_entryId = 1341885;
var cb_blogApp = currentBlogApp;
var cb_blogUserGuid = "4968360b-63cf-dd11-9e4d-001cf0cd104b";
var cb_entryCreatedDate = '2008/11/27 0:07:00';
var enableGoogleAd = true;
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
</script>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>
<script type="text/javascript">
    //SyntaxHighlighter.config.strings.expandSource = '<span><img src="http://static.cnblogs.com/images/expand-code.gif" alt="" class="expand-code-icon"/>View Code</span>';
    $(function () {  
        loadViewCount(cb_entryId);
        fixPostBodyFormat();
        loadAdUnderPost();
        loadBlogSignature();
        LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
        GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);        
        GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);        
    });
</script>
    </div>
    <span><script src="http://counter.cnblogs.com/blog/post/1341885" type="text/javascript"></script></span>
    <ul class="postmetadata">
        <li id="ctl01_liCate" class="icon_cat"><strong>Categories: </strong>
            <a href='http://www.cnblogs.com/lyj/category/129155.html'>NHibernate</a>            
        </li>
        <li id="ctl01_liTag" class="icon_bullet"><strong>Tags: </strong>
            <a href="http://www.cnblogs.com/lyj/tag/NHibernate/">NHibernate</a>
        </li>
        
    </ul>
</div>

<script language="javascript" type="text/javascript">
    var m = window.__blog.postRendered;
    if (m) { m(__$("post")); }
</script>

<script language="javascript" type="text/javascript">
    var m = window.__blog.postRenderPosts;
    if (m) { m(); }
</script><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>

<script type="text/javascript">
    if (typeof commentManager === 'undefined') {
        commentManager = new blogCommentManager();
    }
    commentManager.loadCommentForm();   
</script>

<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="程序员的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="ad_under_post_holder"></div>
<div id="HistoryToday" class="c_ad_block"></div>
</div>





        </div>
        
	    <script language="javascript" type="text/javascript">
	               var m = window.__blog.contentRendered;
	               if (m) { m(__$("content")); }
        </script>

	    <div id="sidebar">
			    

<div id="about">
    <div>
        <h2 id="about_title">
            About
        </h2>
        <div id="about_body">
        <div id="blog-news"></div>
        </div>
    </div>
</div>

			    <script language="javascript" type="text/javascript">
                        var m = window.__blog.aboutRendered;
                        if (m) { m(__$("about")); }
                </script>
                
<script type="text/javascript">
function zzk_go()
{
	var blogapp = 'lyj';
	var keystr = encodeURIComponent("blog:"+blogapp+" "+document.getElementById('q').value);
    window.location = "http://zzk.cnblogs.com/s?w="+keystr;
}
function zzk_go_enter(event)
{
	if(event.keyCode == 13)
	{
	    zzk_go();
	    return false;
	}
}
</script>

<div id="mySearchWrapper">
    <div id="mySearch">
        <input type="image" src="/skins/Minyx2_Lite/images/btnsearch.gif" id="btnZzk"  class="submit" onclick="zzk_go();return false;"/>
        <label class="lb_search"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="keyword" /></label>
    </div>
</div>

                <script language="javascript" type="text/javascript">
                                var m = window.__blog.searchFormRendered;
                                if (m) { m(__$("searchform")); }
                </script>
                <div id="sideMain">
                </div>
                <div id="sideRight">
                </div>
                <div id="sideLeft">            
                </div>
			    
			    <div id="sideContainer">
                </div>
                <script language="javascript" type="text/javascript">
                    $.ajax({
                        url: '/' + currentBlogApp + '/mvc/blog/Minyx2_Lite_SideColumn.aspx',
                        data: '{}',
                        type: 'post',
                        dataType: 'text',
                        contentType: 'application/json; charset=utf-8',
                        success: function (data) {
                            if (data) {
                                $("#sideContainer").html(data);
                                if ($("#blog-calendar").length) {
                                    loadBlogCalendar();
                                }
                                loadBlogSideBlocks();
                                var m = window.__blog.sideContainerRendered;
                                if (m) { m(__$("sideContainer")); }
                                window.__blog.sidebar.__layout();
                            }
                        }
                    });
                    
                 </script>       	
			                      
 		    </div>
     		
	        <script language="javascript" type="text/javascript">
	        var m = window.__blog.sidebarRendered;
	        if (m) { m(__$("sidebar")); }
                </script>        
     </div>
     
        <script language="javascript" type="text/javascript">
            var m = window.__blog.wrapperRendered;
            if (m) { m(__$("wrapper")); }
        </script>

</div>
<!-- end of container -->
    
<script language="javascript" type="text/javascript">
    var m = window.__blog.containerRendered;
    if (m) { m(__$("container")); }
</script>

<div id="footer">
        
<p id="logoFoot">
    <a href="http://www.spiga.com.mx/" title="Agencia Interactiva Spiga">www.spiga.com.mx</a>
</p>
<div class="footText">
<p>
Copyright &copy;2013 李永京
</p>
<p>
<a href="http://www.cnblogs.com">博客园</a>
</p>
</div>
</div><!--end: footer -->

<!--PageEndHtml Block Begin-->
<script language="javascript" src="http://count17.51yes.com/click.aspx?id=179508025&logo=1"/>
<!--PageEndHtml Block End-->
<script type="text/javascript" src="http://common.cnblogs.com/script/google-analytics.js"></script>
</body>
</html>
